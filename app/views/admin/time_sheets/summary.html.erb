<div class="row">
  <div class="col-9">
    <form action="/admin/time_sheets" class="form-horizontal" method="get">
      <div class="input-group d-flex align-items-center">
        <input class="form-control mr-2 ml-2" type="month" id="start" name="where[year_month]" min="2018-03" value="<%= current_select_month_ransack %>" onchange="this.form.submit();">
        <input name="where[full_name_cont]" type="text" class="form-control bg-light border-0 small mr-4" placeholder="<%= t('time_sheets.form_inputs.user_name') %>" aria-label="Search" aria-describedby="basic-addon2"
        value="<%= params[:where][:full_name_cont] if params[:where].present? %>">
        <%= select_tag "where[department_id_eq]",  options_for_select(department_options, params[:where].present?  ? params[:where]["department_id_eq"] : ""), class: "form-control bg-light border-0 small mr-2", onchange: "this.form.submit();" %>
        <div class="input-group-append">
          <button class="btn btn-primary" type="submit">
            <i class="fas fa-search fa-sm"></i>
          </button>
        </div>
      </div>
    </form>
  </div>
</div>

<table class="table table-hover mt-4">
  <thead class='text-center'>
      <tr>
          <th><%= t('time_sheets.table.id') %></th>
          <th><%= t('time_sheets.table.user') %></th>
          <th><%= t('time_sheets.table.department') %></th>
          <th><%= t('time_sheets.table.role') %></th>
          <th><%= t('time_sheets.table.month') %></th>
          <th><%= t('time_sheets.table.present_time') %></th>
          <th><%= t('time_sheets.table.late_time') %></th>
          <th><%= t('time_sheets.table.forgot_keeping') %></th>
          <th><%= t('time_sheets.table.action') %></th>
      </tr>
  </thead>
  <tbody class='text-center'>
    <% @map_time_sheets.each.with_index(1) do |user, index| %>
      <tr>
        <td ><%= user[:user_code] %></td>
        <td ><%= user[:user_name] %></td>
        <td ><%= user[:department]  %></td>
        <td ><%= user[:role] %></td>
        <td ><%= user[:month] %></td>
        <td ><%= user[:present_times] %></td>
        <td ><%= user[:late_times] %></td>
        <td ><%= user[:forgot_keepings] %></td>
        <% this_month = user[:month].to_datetime %>
        <td>
          <div >
            <%= link_to '<i class="fa-regular fa-pen-to-square text-success"></i>'.html_safe, admin_user_time_sheets_path(user_id: user[:user_id], where: {year_month: current_select_month_ransack}), class: "actionLink mr-3" %>
          </div>
        </td>
      </tr>
    <% end %>
    <%= render 'partials/blank_table', object: @users %>
  </tbody>
</table>
<%= will_paginate @users %>
<!-- Modal -->
<div class="modal fade bd-example-modal-lg" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLabel">Import CSV</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <form id="regForm" action="">

        <!-- One "tab" for each step in the form: -->
        <div class="tab"><h2><%= t('time_sheets.import_data.choose_file') %></h2>
          <input id="fileInput" class="" type="file" accept=".csv" oninput="this.className = ''">
          <p class="mt-4"><div class="w-25 text-center"><input class="" id="includeHeader" type="checkbox" oninput="this.className = ''" checked> <label for="includeHeader"><%= t("time_sheets.import_data.include_header") %></label></div></p>
        </div>

        <div class="tab"><h2><%= t('time_sheets.import_data.confirm_data') %></h2>
          <!-- List CSV file data -->
          <table id="tblcsvdata">
              <tbody>

              </tbody>

          </table>
        </div>

        <div class="tab"><h2><%= t('time_sheets.import_data.duplicate_confirm') %></h2>
        </div>

        <div class="mt-4" style="overflow:auto;">
          <div style="float:right;">
            <button class="btn btn-secondary" type="button" id="prevBtn" onclick="nextPrev(-1)"><%= t('form_buttons.previous') %></button>
            <button class="btn btn-info" type="button" id="nextBtn" onclick="nextPrev(1)"><%= t('form_buttons.previous') %></button>
          </div>
        </div>

        <!-- Circles which indicates the steps of the form: -->
        <div style="text-align:center">
          <span class="step"></span>
          <span class="step"></span>
          <span class="step"></span>
        </div>

        </form>
      </div>
    </div>
  </div>
</div>

<script>
var currentTab = 0; // Current tab is set to be the first tab (0)
var fileParams = [];
var month = "07-2017"
var includeHeader = 1;
showTab(currentTab); // Display the current tab

function showTab(n) {
  // This function will display the specified tab of the form ...
  var x = document.getElementsByClassName("tab");
  const token = localStorage.getItem('token');

  x[n].style.display = "block";
  // ... and fix the Previous/Next buttons:
  if (n == 0) {
    document.getElementById("prevBtn").style.display = "none";
  } else {
    document.getElementById("prevBtn").style.display = "inline";
  }
  if (n == (x.length - 1)) {
    document.getElementById("nextBtn").innerHTML = "Submit";
  } else {
    document.getElementById("nextBtn").innerHTML = "Next";
  }

  if (n == 1){
    var files = document.querySelector('#fileInput').files;
    if(files.length > 0 ){
          includeHeader = document.getElementById("includeHeader").checked ? 7 : 0;
          // Selected file
          var file = files[0];

          // FileReader Object
          var reader = new FileReader();

          // Read file as string 
          reader.readAsText(file);

          // Load event
          reader.onload = function(event) {
            // Read file data
            var csvdata = event.target.result;
            // Split by line break to gets rows Array
            var rowData = csvdata.split('\n');
            // <table > <tbody>
            var tbodyEl = document.getElementById('tblcsvdata').getElementsByTagName('tbody')[0];
            tbodyEl.innerHTML = "";
            // Loop on the row Array (change row=0 if you also want to read 1st row)
            month = rowData[2].split(',')[2] + "-" + rowData[3].split(',')[2];
            for (var row = includeHeader; row < rowData.length; row++) {
                // Insert a row at the end of table
                var newRow = tbodyEl.insertRow();
                // Split by comma (,) to get column Array
                rowColData = rowData[row].split(',');
                if(rowColData[0] === "") { continue; }
                console.log(rowColData);
                fileParams.push(rowColData);
                // Loop on the row column Array
                for (var col = 0; col < 65; col++) {
                    if(rowColData[col] !== undefined){
                      // Insert a cell at the end of the row
                      var newCell = newRow.insertCell();
                      newCell.innerHTML = ( rowColData[col] || "empty" ) + "|";
                    }
                }

            }
          };

     }else{
          alert("Please select a file.");
     }
  }

  if (n == 2) {
    $.ajax({
      url: '<%=ENV.fetch("BE_HOST") %>/api/v1/admin/time_sheets/check_import_data',
      dataType: 'json',
      method: 'post',
      headers: {
        token: token
      },
      data: {
        time_sheets: fileParams,
        month: month
      },
      success: function(doc) {
        successCallback(doc.data);
      }
    });
  }
  // ... and run a function that displays the correct step indicator:
  fixStepIndicator(n)
}

function nextPrev(n) {
  // This function will figure out which tab to display
  var x = document.getElementsByClassName("tab");
  // Exit the function if any field in the current tab is invalid:
  if (n == 1 && !validateForm()) return false;
  // Hide the current tab:
  x[currentTab].style.display = "none";
  // Increase or decrease the current tab by 1:
  currentTab = currentTab + n;
  // if you have reached the end of the form... :
  if (currentTab >= x.length) {
    //...the form gets submitted:
    document.getElementById("regForm").submit();
    return false;
  }
  // Otherwise, display the correct tab:
  showTab(currentTab);
}

function validateForm() {
  // This function deals with validation of the form fields
  var x, y, i, valid = true;
  x = document.getElementsByClassName("tab");
  y = x[currentTab].getElementsByTagName("input");
  // A loop that checks every input field in the current tab:
  for (i = 0; i < y.length; i++) {
    // If a field is empty...
    if (y[i].value == "") {
      // add an "invalid" class to the field:
      y[i].className += " invalid";
      // and set the current valid status to false:
      valid = false;
    }
  }
  // If the valid status is true, mark the step as finished and valid:
  if (valid) {
    document.getElementsByClassName("step")[currentTab].className += " finish";
  }
  return valid; // return the valid status
}

function fixStepIndicator(n) {
  // This function removes the "active" class of all steps...
  var i, x = document.getElementsByClassName("step");
  for (i = 0; i < x.length; i++) {
    x[i].className = x[i].className.replace(" active", "");
  }
  //... and adds the "active" class to the current step:
  x[n].className += " active";
}


document.getElementById("newForm").addEventListener("submit", function (event){
  event.preventDefault();

  document.getElementById("closeForm").click();
})
</script>